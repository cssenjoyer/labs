/*Дана целочисленная квадратная матрица. Определить: сумму элементов в тех
строках, которые не содержат отрицательных элементов; минимум среди сумм элементов
диагоналей, параллельных главной диагонали матрицы.*/
#include <stdio.h>
#include <locale.h>
#include <limits.h> // Для INT_MAX
#include <time.h>
#include <stdlib.h>

#define MAX_SIZE 100 // Максимальный размер матрицы

int main()
{
    setlocale(LC_ALL, "RUS");

    int size;
    int matrix[MAX_SIZE][MAX_SIZE]; // Выделяем память под 100x100 матрицу

    printf("Введите размер матрицы (от 1 до 100): ");
    while (1) {
        if (scanf_s("%d", &size) != 1) {
            printf("Ошибка ввода. Попробуйте снова.\n");
            while (getchar() != '\n');
            printf("Введите корректное значение: ");
        }
        else {
            if (getchar() != '\n') {
                printf("Ошибка ввода. Попробуйте снова.\n");
                while (getchar() != '\n');
                printf("Введите корректное значение: ");
                continue;
            }
            if (size < 1 || size > MAX_SIZE) {
                printf("Ошибка, размер должен быть от 1 до 100.\n");
                printf("Введите корректное значение: ");
                continue;
            }
            break;
        }
    }

    int choice;

    printf("Выберите способ инициализации массива:\n");
    printf("1 - Ввод с клавиатуры\n");
    printf("2 - Заполнение случайными числами\n");
    printf("Ваш выбор: ");
    scanf_s("%d", &choice);

    if (choice == 1) {
        printf("Введите элементы матрицы размером %dx%d:\n", size, size);
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                printf("matrix[%d][%d]: ", i, j);
                while (scanf_s("%d", &matrix[i][j]) != 1) {
                    printf("Ошибка ввода. Попробуйте снова.\n");
                    while (getchar() != '\n');
                    printf("matrix[%d][%d]: ", i, j);
                }
            }
        }
    }
    else if (choice == 2) {
        srand(time(NULL)); // Инициализация генератора случайных чисел
        int lower = -10, upper = 10; // Диапазон случайных чисел
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                matrix[i][j] = lower + rand() % (upper - lower + 1);
            }
        }
        printf("Сгенерированная матрица:\n");
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                printf("%4d", matrix[i][j]);
            }
            printf("\n");
        }
    }
    else {
        printf("Неверный выбор. Завершение программы.\n");
        return 1;
    }

    int sum_rows = 0;
    int min_diag_sum = INT_MAX;

    // Сумма элементов строк без отрицательных элементов
    for (int i = 0; i < size; i++) {
        int row_contains_negative = 0;
        int row_sum = 0;
        for (int j = 0; j < size; j++) {
            if (matrix[i][j] < 0) {
                row_contains_negative = 1;
                break;
            }
            row_sum += matrix[i][j];
        }
        if (!row_contains_negative) {
            sum_rows += row_sum;
        }
    }

    // Минимум среди сумм диагоналей, параллельных главной
    for (int diag_offset = -(size - 1); diag_offset <= size - 1; diag_offset++) {
        int sum_diag = 0;
        for (int i = 0; i < size; i++) {
            int j = i + diag_offset;
            if (j >= 0 && j < size) {
                sum_diag += matrix[i][j];
            }
        }
        if (sum_diag < min_diag_sum) {
            min_diag_sum = sum_diag;
        }
    }

    printf("Сумма элементов строк без отрицательных элементов: %d\n", sum_rows);
    printf("Минимум среди сумм диагоналей, параллельных главной: %d\n", min_diag_sum);

    return 0;
}
